{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["days","comma","data","toString","replace","App","useCookies","cookies","setCookie","useState","username","setUsername","slackId","setSlackId","values","mon","tue","wed","thu","fri","setValues","sum","setSum","calSum","setCalSum","slackToken","setSlackToken","useEffect","tempSum","tempCalSum","Object","keys","forEach","day","temp","valueInputHandler","value","sendButtonOnClickHandler","postToSlack","a","channel","text","WebClient","require","chat","postMessage","Error","alert","message","toSendMessage","window","confirm","console","error","log","Container","className","Row","Col","lg","Card","bg","Body","Form","Group","Label","Control","type","onInput","event","target","placeholder","e","map","i","column","onFocus","parseInt","Footer","Button","onClick","variant","block","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f29ca968.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport {useEffect, useState} from 'react'\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap'\nimport {useCookies} from 'react-cookie'\nimport './App.css'\n\nconst days = ['월', '화', '수', '목', '금']\n\nconst comma = (data) => data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nfunction App() {\n  const [cookies, setCookie] = useCookies(['rememberValues'])\n  const [username, setUsername] = useState(cookies.username || '')\n  const [slackId, setSlackId] = useState(cookies.slackId || '')\n  const [values, setValues] = useState(\n    cookies.values || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [sum, setSum] = useState(cookies.sum || 0)\n  const [calSum, setCalSum] = useState(cookies.calSum || 0)\n  const [slackToken, setSlackToken] = useState(cookies.slackToken || '')\n\n  useEffect(() => {\n    let tempSum = 0\n    let tempCalSum = 0\n\n    Object.keys(values).forEach((day) => {\n      if (typeof values[day] !== 'number') return\n      let temp = values[day] - 6000\n      if (temp < 0) temp = 0\n\n      tempSum += values[day]\n      tempCalSum += temp\n    })\n\n    setSum(tempSum)\n    setCalSum(tempCalSum)\n    setCookie('sum', tempSum)\n    setCookie('calSum', tempCalSum)\n    setCookie('values', values)\n  }, [setCookie, values])\n\n  const usernameInputHandler = (e) => {\n    setUsername(e.target.value)\n    setCookie('username', e.target.value)\n  }\n\n  const slackIdInputHandler = (e) => {\n    setSlackId(e.target.value)\n    setCookie('slackId', e.target.value)\n  }\n\n  const valueInputHandler = (value, day) => {\n    if (day === 'token') {\n      setSlackToken(value)\n      setCookie('slackToken', value)\n      return\n    }\n    setValues({...values, [day]: value})\n  }\n\n  const sendButtonOnClickHandler = async () => {\n    try {\n      if (!username) {\n        throw new Error('이름을 입력해주세요.')\n      } else if (!sum) {\n        throw new Error('값을 확인해주세요.')\n      } else if (!slackId) {\n        throw new Error('슬랙 아이디를 확인해주세요.')\n      }\n    } catch (err) {\n      alert(err.message)\n      return\n    }\n\n    const toSendMessage = `${username} / ${sum} / ${calSum}`\n\n    function postToSlack(channel: string, text: string) {\n      const {WebClient} = require('@slack/client')\n      const web = new WebClient(slackToken)\n      return web.chat.postMessage({channel, text})\n    }\n\n    if (window.confirm(`${toSendMessage} 전송하시겠습니까?`)) {\n      try {\n        await postToSlack('UKPCGGH0B', `${toSendMessage}         <@${slackId}>`)\n        await postToSlack(slackId, `${toSendMessage} 전송되었습니다.`)\n      } catch (err) {\n        console.error(err)\n        alert('메시지 전송 실패!')\n        return\n      }\n      setValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n    } else {\n      console.log('취소')\n    }\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center align-self-center\">\n        <Col lg={6}>\n          <Card bg=\"Light\">\n            <Card.Body>\n              <Form.Group>\n                <Form.Label lg={2}>Slack Token</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  className=\"my-3\"\n                  value={slackToken}\n                  onInput={(event) =>\n                    valueInputHandler(event.target.value, 'token')\n                  }\n                />\n                <Row>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"이름\"\n                      value={slackId}\n                      onInput={slackIdInputHandler}\n                    />\n                  </Col>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Slack ID\"\n                      value={username}\n                      onInput={usernameInputHandler}\n                    />\n                  </Col>\n                </Row>\n                {Object.keys(values).map((day, i) => (\n                  <div>\n                    <Form.Label column lg={2}>\n                      {days[i]}\n                    </Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      value={values[day]}\n                      onFocus={() => valueInputHandler('', day)}\n                      onInput={(event) =>\n                        valueInputHandler(parseInt(event.target.value), day)\n                      }\n                    />\n                  </div>\n                ))}\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer>\n              {`${username} / ${comma(sum)} / ${comma(calSum)}`}\n              <Button\n                className=\"my-4\"\n                onClick={sendButtonOnClickHandler}\n                variant=\"outline-success\"\n                block>\n                전송\n              </Button>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}