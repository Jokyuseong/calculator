{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["days","comma","data","toString","replace","App","useCookies","cookies","setCookie","useState","username","setUsername","slackId","setSlackId","values","mon","tue","wed","thu","fri","setValues","personalValues","setPersonalValues","sum","co","pers","setSum","calSum","setCalSum","slackToken","setSlackToken","setCookies","tempSum","tempCalSum","type","useEffect","Object","keys","forEach","day","isNaN","temp","valueInputHandler","value","target","sendButtonOnClickHandler","postToSlack","a","channel","text","WebClient","require","chat","postMessage","Error","alert","message","personalTypeMessage","corporationTypeMessage","window","confirm","console","error","Container","className","Row","Col","lg","Card","bg","Body","Form","Group","Control","placeholder","onInput","event","e","map","i","Label","column","onFocus","parseInt","Footer","Button","onClick","variant","block","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05abbb52.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport {useEffect, useState} from 'react'\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap'\nimport {useCookies} from 'react-cookie'\nimport './App.css'\n\nconst days = ['월', '화', '수', '목', '금']\n\nconst comma = (data) => data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nfunction App() {\n  const [cookies, setCookie] = useCookies(['rememberValues'])\n  const [username, setUsername] = useState(cookies.username || '')\n  const [slackId, setSlackId] = useState(cookies.slackId || '')\n  const [values, setValues] = useState(\n    cookies.values || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [personalValues, setPersonalValues] = useState(\n    cookies.personalValues || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [sum, setSum] = useState(cookies.sum || {co: 0, pers: 0})\n  const [calSum, setCalSum] = useState(cookies.calSum || {co: 0, pers: 0})\n  const [slackToken, setSlackToken] = useState(cookies.slackToken || '')\n\n  const setCookies = (tempSum, tempCalSum, type) => {\n    setSum({...tempSum})\n    setCalSum({...tempCalSum})\n    setCookie('sum', {...tempSum})\n    setCookie('calSum', {...tempCalSum})\n    if (type === 'personal') {\n      setCookie('personalValues', personalValues)\n    } else {\n      setCookie('values', values)\n    }\n  }\n\n  useEffect(() => {\n    let tempSum = {...sum, co: 0}\n    let tempCalSum = {...calSum, co: 0}\n\n    Object.keys(values).forEach((day) => {\n      if (typeof values[day] !== 'number' || isNaN(values[day])) return\n      let temp = values[day] - 6000\n      if (temp < 0) temp = 0\n\n      tempSum.co += values[day]\n      tempCalSum.co += temp\n    })\n\n    setCookies(tempSum, tempCalSum, 'coperation')\n  }, [values])\n\n  useEffect(() => {\n    let tempSum = {...sum, pers: 0}\n    let tempCalSum = {...calSum, pers: 0}\n\n    Object.keys(personalValues).forEach((day) => {\n      if (typeof personalValues[day] !== 'number' || isNaN(personalValues[day]))\n        return\n      if (personalValues[day] > 6000) {\n        tempCalSum.pers += 6000\n      } else {\n        tempCalSum.pers += personalValues[day]\n      }\n      tempSum.pers += personalValues[day]\n    })\n\n    setCookies(tempSum, tempCalSum, 'personal')\n  }, [personalValues])\n\n  const usernameInputHandler = (e) => {\n    setUsername(e.target.value)\n    setCookie('username', e.target.value)\n  }\n\n  const slackIdInputHandler = (e) => {\n    setSlackId(e.target.value)\n    setCookie('slackId', e.target.value)\n  }\n\n  const valueInputHandler = (value, day, target) => {\n    if (day === 'token') {\n      setSlackToken(value)\n      setCookie('slackToken', value)\n      return\n    }\n    if (target === 'personal') {\n      setPersonalValues({...personalValues, [day]: value})\n    } else {\n      setValues({...values, [day]: value})\n    }\n  }\n\n  const sendButtonOnClickHandler = async () => {\n    try {\n      if (!username) {\n        throw new Error('이름을 입력해주세요.')\n      } else if (!sum.co && !sum.pers) {\n        throw new Error('전송할 내용이 없습니다.')\n      } else if (!slackId) {\n        throw new Error('슬랙 아이디를 확인해주세요.')\n      } else if (!slackToken) {\n        throw new Error('슬랙 토큰을 확인해주세요.')\n      }\n    } catch (err) {\n      alert(err.message)\n      return\n    }\n\n    let personalTypeMessage = ''\n    let corporationTypeMessage = ''\n    if (sum.pers > 0) {\n      personalTypeMessage = `[개인카드] ${username} / 총지출: ${sum.pers} / 회사부담: ${calSum.pers}`\n    }\n    if (sum.co > 0) {\n      corporationTypeMessage = `[법인카드] ${username} / 총지출: ${sum.co} / 개인부담: ${calSum.co}`\n    }\n\n    function postToSlack(channel, text) {\n      const {WebClient} = require('@slack/client')\n      const web = new WebClient(slackToken)\n      return web.chat.postMessage({channel, text})\n    }\n\n    if (\n      window.confirm(\n        `${personalTypeMessage} \\n${corporationTypeMessage} \\n전송하시겠습니까?`,\n      )\n    ) {\n      try {\n        if (sum.pers > 0) {\n          await postToSlack(\n            'UKPCGGH0B',\n            `${personalTypeMessage}         <@${slackId}>`,\n          )\n          await postToSlack(slackId, `${personalTypeMessage} 전송되었습니다.`)\n        }\n        if (sum.co > 0) {\n          await postToSlack(\n            'UKPCGGH0B',\n            `${corporationTypeMessage}         <@${slackId}>`,\n          )\n          await postToSlack(\n            slackId,\n            `${corporationTypeMessage} 전송되었습니다.`,\n          )\n        }\n      } catch (err) {\n        console.error(err)\n        alert('메시지 전송 실패!')\n        return\n      }\n      setValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n      setPersonalValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n    } else {\n      console.error('전송취소')\n    }\n  }\n\n  return (\n    <Container className=\"mt-2\">\n      <Row className=\"justify-content-center align-self-center\">\n        <Col lg={6}>\n          <Card bg=\"Light\">\n            <Card.Body>\n              <Form.Group>\n                <Form.Control\n                  type=\"text\"\n                  className=\"mb-3\"\n                  placeholder=\"Slack Token\"\n                  value={slackToken}\n                  onInput={(event) =>\n                    valueInputHandler(event.target.value, 'token')\n                  }\n                />\n                <Row>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Slack ID\"\n                      value={slackId}\n                      onInput={slackIdInputHandler}\n                    />\n                  </Col>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"이름\"\n                      value={username}\n                      onInput={usernameInputHandler}\n                    />\n                  </Col>\n                </Row>\n                <hr />\n                <Row>\n                  <Col>\n                    <p className=\"text-center\">법인</p>\n                    {Object.keys(values).map((day, i) => (\n                      <div>\n                        <Form.Label column lg={2}>\n                          {days[i]}\n                        </Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={values[day]}\n                          onFocus={() => valueInputHandler('', day)}\n                          onInput={(event) =>\n                            valueInputHandler(parseInt(event.target.value), day)\n                          }\n                        />\n                      </div>\n                    ))}\n                  </Col>\n                  <Col>\n                    <p className=\"text-center\">개인</p>\n                    {Object.keys(values).map((day, i) => (\n                      <div>\n                        <Form.Label column lg={2}>\n                          {days[i]}\n                        </Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={personalValues[day]}\n                          onFocus={() => valueInputHandler('', day, 'personal')}\n                          onInput={(event) =>\n                            valueInputHandler(\n                              parseInt(event.target.value),\n                              day,\n                              'personal',\n                            )\n                          }\n                        />\n                      </div>\n                    ))}\n                  </Col>\n                </Row>\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer>\n              <Row>\n                <Col>\n                  <p>[법인카드] {username}</p>\n                  <p>총지출액: {comma(sum.co)}</p>\n                  <p>개인부담금: {comma(calSum.co)}</p>\n                </Col>\n                <Col>\n                  <p>[개인카드] {username}</p>\n                  <p>총지출액: {comma(sum.pers)}</p>\n                  <p>회사부담금: {comma(calSum.pers)}</p>\n                </Col>\n              </Row>\n              <Button\n                className=\"my-4\"\n                onClick={sendButtonOnClickHandler}\n                variant=\"outline-success\"\n                block>\n                전송\n              </Button>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}