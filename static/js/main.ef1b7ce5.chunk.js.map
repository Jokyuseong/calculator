{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["days","wage","comma","data","toString","replace","App","useCookies","cookies","setCookie","useState","username","setUsername","slackId","setSlackId","values","mon","tue","wed","thu","fri","setValues","personalValues","setPersonalValues","sum","co","pers","setSum","calSum","setCalSum","slackToken","setSlackToken","isAuth","setIsAuth","setCookies","tempSum","tempCalSum","type","useEffect","Object","keys","forEach","day","isNaN","temp","valueInputHandler","value","target","postToSlack","channel","text","WebClient","require","chat","postMessage","sendButtonOnClickHandler","a","Error","alert","message","personalTypeMessage","corporationTypeMessage","window","confirm","console","error","authButtonOnClickHandler","Container","className","Row","Col","lg","Card","bg","Body","Form","Group","Button","style","margin","size","onClick","variant","map","i","Label","column","Control","onFocus","onInput","event","parseInt","Footer","block","placeholder","e","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef1b7ce5.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport {useEffect, useState} from 'react'\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap'\nimport {useCookies} from 'react-cookie'\nimport './App.css'\n\nconst days = ['월', '화', '수', '목', '금']\nconst wage = 6000\n\nconst comma = (data) => data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nfunction App() {\n  const [cookies, setCookie] = useCookies(['rememberValues'])\n  const [username, setUsername] = useState(cookies.username || '')\n  const [slackId, setSlackId] = useState(cookies.slackId || '')\n  const [values, setValues] = useState(\n    cookies.values || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [personalValues, setPersonalValues] = useState(\n    cookies.personalValues || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [sum, setSum] = useState(cookies.sum || {co: 0, pers: 0})\n  const [calSum, setCalSum] = useState(cookies.calSum || {co: 0, pers: 0})\n  const [slackToken, setSlackToken] = useState(cookies.slackToken || '')\n  const [isAuth, setIsAuth] = useState(cookies.isAuth || '')\n\n  const setCookies = (tempSum, tempCalSum, type) => {\n    setSum({...tempSum})\n    setCalSum({...tempCalSum})\n    setCookie('sum', {...tempSum})\n    setCookie('calSum', {...tempCalSum})\n    if (type === 'personal') {\n      setCookie('personalValues', personalValues)\n    } else {\n      setCookie('values', values)\n    }\n  }\n\n  useEffect(() => {\n    let tempSum = {...sum, co: 0}\n    let tempCalSum = {...calSum, co: 0}\n\n    Object.keys(values).forEach((day) => {\n      if (typeof values[day] !== 'number' || isNaN(values[day])) return\n      let temp = values[day] - wage\n      if (temp < 0) temp = 0\n\n      tempSum.co += values[day]\n      tempCalSum.co += temp\n    })\n\n    setCookies(tempSum, tempCalSum, 'coperation')\n  }, [values])\n\n  useEffect(() => {\n    let tempSum = {...sum, pers: 0}\n    let tempCalSum = {...calSum, pers: 0}\n\n    Object.keys(personalValues).forEach((day) => {\n      if (typeof personalValues[day] !== 'number' || isNaN(personalValues[day]))\n        return\n      if (personalValues[day] > wage) {\n        tempCalSum.pers += wage\n      } else {\n        tempCalSum.pers += personalValues[day]\n      }\n      tempSum.pers += personalValues[day]\n    })\n\n    setCookies(tempSum, tempCalSum, 'personal')\n  }, [personalValues])\n\n  const usernameInputHandler = (e) => {\n    setUsername(e.target.value)\n    setCookie('username', e.target.value)\n  }\n\n  const slackIdInputHandler = (e) => {\n    setSlackId(e.target.value)\n    setCookie('slackId', e.target.value)\n  }\n\n  const valueInputHandler = (value, day, target) => {\n    if (day === 'token') {\n      setSlackToken(value)\n      setCookie('slackToken', value)\n      return\n    }\n    if (target === 'personal') {\n      setPersonalValues({...personalValues, [day]: value})\n    } else {\n      setValues({...values, [day]: value})\n    }\n  }\n\n  function postToSlack(channel, text) {\n    const {WebClient} = require('@slack/client')\n    const web = new WebClient(slackToken)\n    return web.chat.postMessage({channel, text})\n  }\n\n  const sendButtonOnClickHandler = async () => {\n    try {\n      if (!sum.co && !sum.pers) {\n        throw new Error('전송할 내용이 없습니다.')\n      }\n    } catch (err) {\n      alert(err.message)\n      return\n    }\n\n    let personalTypeMessage = ''\n    let corporationTypeMessage = ''\n    if (sum.pers > 0) {\n      personalTypeMessage = `[개인카드] ${username} / 총지출: ${sum.pers} / 회사부담: ${calSum.pers}`\n    }\n    if (sum.co > 0) {\n      corporationTypeMessage = `[법인카드] ${username} / 총지출: ${sum.co} / 개인부담: ${calSum.co}`\n    }\n\n    if (\n      window.confirm(\n        `${personalTypeMessage} \\n${corporationTypeMessage} \\n전송하시겠습니까?`,\n      )\n    ) {\n      try {\n        if (sum.pers > 0) {\n          await postToSlack(\n            'UKPCGGH0B',\n            `${personalTypeMessage}         <@${slackId}>`,\n          )\n          await postToSlack(slackId, `${personalTypeMessage} 전송되었습니다.`)\n        }\n        if (sum.co > 0) {\n          await postToSlack(\n            'UKPCGGH0B',\n            `${corporationTypeMessage}         <@${slackId}>`,\n          )\n          await postToSlack(\n            slackId,\n            `${corporationTypeMessage} 전송되었습니다.`,\n          )\n        }\n      } catch (err) {\n        console.error(err)\n        alert('메시지 전송 실패!')\n        return\n      }\n      setValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n      setPersonalValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n    } else {\n      console.error('전송취소')\n    }\n  }\n  const authButtonOnClickHandler = async () => {\n    try {\n      if (!username) {\n        throw new Error('이름을 입력해주세요.')\n      } else if (!slackId) {\n        throw new Error('슬랙 아이디를 확인해주세요.')\n      } else if (!slackToken) {\n        throw new Error('슬랙 토큰을 확인해주세요.')\n      }\n      await postToSlack(slackId, '인증되었습니다.')\n      setIsAuth(true)\n      setCookie('isAuth', true)\n    } catch (err) {\n      alert(err.message)\n      return\n    }\n  }\n\n  if (!isAuth) {\n    return (\n      <Card bg=\"Light\" className=\"mt-5\">\n        <Card.Body>\n          <Form.Group>\n            <Form.Control\n              type=\"text\"\n              className=\"mb-3\"\n              placeholder=\"Slack Token\"\n              value={slackToken}\n              onInput={(event) =>\n                valueInputHandler(event.target.value, 'token')\n              }\n            />\n            <Row>\n              <Col>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Slack ID\"\n                  value={slackId}\n                  onInput={slackIdInputHandler}\n                />\n              </Col>\n              <Col>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"이름\"\n                  value={username}\n                  onInput={usernameInputHandler}\n                />\n              </Col>\n            </Row>\n            <Button\n              className=\"my-4\"\n              onClick={authButtonOnClickHandler}\n              variant=\"outline-info\"\n              block>\n              인증\n            </Button>\n          </Form.Group>\n        </Card.Body>\n      </Card>\n    )\n  }\n  return (\n    <Container className=\"mt-2\">\n      <Row className=\"justify-content-center align-self-center\">\n        <Col lg={6}>\n          <Card bg=\"Light\">\n            <Card.Body>\n              <Form.Group>\n                <Row>\n                  <Button\n                    className=\"ml-auto mr-3\"\n                    style={{margin: 0}}\n                    size=\"sm\"\n                    onClick={() => setIsAuth(false)}\n                    variant=\"outline-danger\">\n                    정보수정\n                  </Button>\n                </Row>\n                <hr />\n                <Row>\n                  <Col>\n                    <p className=\"text-center\">법인</p>\n                    {Object.keys(values).map((day, i) => (\n                      <div>\n                        <Form.Label column lg={2}>\n                          {days[i]}\n                        </Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={values[day]}\n                          onFocus={() => valueInputHandler('', day)}\n                          onInput={(event) =>\n                            valueInputHandler(parseInt(event.target.value), day)\n                          }\n                        />\n                      </div>\n                    ))}\n                  </Col>\n                  <Col>\n                    <p className=\"text-center\">개인</p>\n                    {Object.keys(values).map((day, i) => (\n                      <div>\n                        <Form.Label column lg={2}>\n                          {days[i]}\n                        </Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={personalValues[day]}\n                          onFocus={() => valueInputHandler('', day, 'personal')}\n                          onInput={(event) =>\n                            valueInputHandler(\n                              parseInt(event.target.value),\n                              day,\n                              'personal',\n                            )\n                          }\n                        />\n                      </div>\n                    ))}\n                  </Col>\n                </Row>\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer>\n              <Row>\n                <Col>\n                  <p>[법인카드] {username}</p>\n                  <p>총지출액: {comma(sum.co)}</p>\n                  <p>개인부담금: {comma(calSum.co)}</p>\n                </Col>\n                <Col>\n                  <p>[개인카드] {username}</p>\n                  <p>총지출액: {comma(sum.pers)}</p>\n                  <p>회사부담금: {comma(calSum.pers)}</p>\n                </Col>\n              </Row>\n              <Button\n                className=\"my-4\"\n                onClick={sendButtonOnClickHandler}\n                variant=\"outline-success\"\n                block>\n                전송\n              </Button>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}