{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["days","comma","data","toString","replace","postToSlack","channel","text","WebClient","require","chat","postMessage","App","useCookies","cookies","setCookie","useState","username","setUsername","slackId","setSlackId","values","mon","tue","wed","thu","fri","setValues","sum","setSum","calSum","setCalSum","useEffect","tempSum","tempCalSum","Object","keys","forEach","day","temp","valueInputHandler","value","sendButtonOnClickHandler","a","Error","alert","message","toSendMessage","window","confirm","console","error","log","Container","className","Row","Col","lg","Card","bg","Body","Form","Group","Control","type","placeholder","onInput","e","target","map","i","Label","column","onFocus","event","parseInt","Footer","Button","onClick","variant","block","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.807f3473.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css'\nimport {useEffect, useState} from 'react'\nimport {Button, Card, Col, Container, Form, Row} from 'react-bootstrap'\nimport {useCookies} from 'react-cookie'\nimport './App.css'\n\nconst days = ['월', '화', '수', '목', '금']\n\nconst comma = (data) => data.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nfunction postToSlack(channel: string, text: string) {\n  const {WebClient} = require('@slack/client')\n  const web = new WebClient(\n    'xoxb-57614685490-1767810314821-MF3Rk1zKjL1IUpidLVjbruJg',\n  )\n  return web.chat.postMessage({channel, text})\n}\n\nfunction App() {\n  const [cookies, setCookie] = useCookies(['rememberValues'])\n  const [username, setUsername] = useState('')\n  const [slackId, setSlackId] = useState('')\n  const [values, setValues] = useState(\n    cookies.values || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0},\n  )\n  const [sum, setSum] = useState(0)\n  const [calSum, setCalSum] = useState(0)\n\n  useEffect(() => {\n    setUsername(cookies.username || '')\n    setSlackId(cookies.slackId || '')\n    setSum(cookies.sum || 0)\n    setCalSum(cookies.calSum || 0)\n    setValues(cookies.values || {mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n  }, [])\n\n  useEffect(() => {\n    let tempSum = 0\n    let tempCalSum = 0\n\n    Object.keys(values).forEach((day) => {\n      if (typeof values[day] !== 'number') return\n      let temp = values[day] - 6000\n      if (temp < 0) temp = 0\n\n      tempSum += values[day]\n      tempCalSum += temp\n    })\n\n    setSum(tempSum)\n    setCalSum(tempCalSum)\n    setCookie('sum', tempSum)\n    setCookie('calSum', tempCalSum)\n    setCookie('values', values)\n  }, [setCookie, values])\n\n  const usernameInputHandler = (e) => {\n    setUsername(e.target.value)\n    setCookie('username', e.target.value)\n  }\n\n  const slackIdInputHandler = (e) => {\n    setSlackId(e.target.value)\n    setCookie('slackId', e.target.value)\n  }\n\n  const valueInputHandler = (value, day) => {\n    setValues({...values, [day]: value})\n  }\n\n  const sendButtonOnClickHandler = async () => {\n    try {\n      if (!username) {\n        throw new Error('이름을 입력해주세요.')\n      } else if (!sum) {\n        throw new Error('값을 확인해주세요.')\n      } else if (!slackId) {\n        throw new Error('슬랙 아이디를 확인해주세요.')\n      }\n    } catch (err) {\n      alert(err.message)\n      return\n    }\n\n    const toSendMessage = `${username} / ${sum} / ${calSum}`\n\n    if (window.confirm(`${toSendMessage} 전송하시겠습니까?`)) {\n      try {\n        await postToSlack('UKPCGGH0B', `${toSendMessage}         <@${slackId}>`)\n        await postToSlack(slackId, `${toSendMessage} 전송되었습니다.`)\n      } catch (err) {\n        console.error(err)\n        alert('메시지 전송 실패!')\n        return\n      }\n      setValues({mon: 0, tue: 0, wed: 0, thu: 0, fri: 0})\n    } else {\n      console.log('취소')\n    }\n  }\n\n  return (\n    <Container className=\"mt-5\">\n      <Row className=\"justify-content-center align-self-center\">\n        <Col lg={6}>\n          <Card bg=\"Light\">\n            <Card.Body>\n              <Form.Group>\n                <Row>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"이름\"\n                      value={slackId}\n                      onInput={slackIdInputHandler}\n                    />\n                  </Col>\n                  <Col>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Slack ID\"\n                      value={username}\n                      onInput={usernameInputHandler}\n                    />\n                  </Col>\n                </Row>\n                {Object.keys(values).map((day, i) => (\n                  <div>\n                    <Form.Label column lg={2}>\n                      {days[i]}\n                    </Form.Label>\n                    <Form.Control\n                      type=\"number\"\n                      value={values[day]}\n                      onFocus={() => valueInputHandler('', day)}\n                      onInput={(event) =>\n                        valueInputHandler(parseInt(event.target.value), day)\n                      }\n                    />\n                  </div>\n                ))}\n              </Form.Group>\n            </Card.Body>\n            <Card.Footer>\n              {`${username} / ${comma(sum)} / ${comma(calSum)}`}\n              <Button\n                className=\"my-4\"\n                onClick={sendButtonOnClickHandler}\n                variant=\"outline-success\"\n                block>\n                전송\n              </Button>\n            </Card.Footer>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}